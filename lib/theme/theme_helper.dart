import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:tulips/app/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray200,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(0.8),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 8.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 22.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90002,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF5B0888),
    primaryContainer: Color(0XFF877E7E),

    // Error colors
    errorContainer: Color(0XFF3F3F3F),
    onErrorContainer: Color(0XACFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFC1C6C8),
    onPrimaryContainer: Color(0XE50F0F0F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFEAF5FB);
  Color get blue5001 => Color(0XFFDFF0F8);

  // BlueGray
  Color get blueGray100 => Color(0XFFD4D4D4);
  Color get blueGray50 => Color(0XFFEEF1F7);
  Color get blueGray900 => Color(0XFF303030);
  Color get blueGray90001 => Color(0XFF333232);

  // DeepPurple
  Color get deepPurple900 => Color(0XFF0601B4);

  // Gray
  Color get gray100 => Color(0XFFF3F5F5);
  Color get gray10001 => Color(0XFFF3F4F5);
  Color get gray200 => Color(0XFFE8E8E8);
  Color get gray400 => Color(0XFFBCA8A8);
  Color get gray500 => Color(0XFFABABAB);
  Color get gray50001 => Color(0XFF999A9A);
  Color get gray50002 => Color(0XFF8F979B);
  Color get gray600 => Color(0XFF757575);
  Color get gray700 => Color(0XFF555555);
  Color get gray70001 => Color(0XFF626262);
  Color get gray800 => Color(0XFF444444);
  Color get gray80001 => Color(0XFF474747);
  Color get gray900 => Color(0XFF252626);
  Color get gray90001 => Color(0XFF181D27);
  Color get gray90002 => Color(0XFF262626);

  // Green
  Color get green400 => Color(0XFF60D669);

  // Orange
  Color get orange600 => Color(0XFFD29700);

  // Purple
  Color get purple50 => Color(0XFFF5E9FF);
  Color get purpleA100 => Color(0XFFD595F8);

  // White
  Color get whiteA700 => Color(0XFFFEFBFF);
  Color get whiteA70001 => Color(0XFFFDFAFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
